.program uart_rx

;  Each Division is 8 cycles
; |-------|---------|---------|
; ---------          ----------
;         |         |
;         |         |
;         |         |
;         -----------
;
; UART should sample in the middle of each bit. So we sample at a higher rate than the data comes in.
; In this case we are sampling at 8 times the bit rate.
; When we detect the falling edge, we need to wait 8 cycles till we get to bit 
;
;


start:
    wait 0 pin 0  [10]  ; Stall until start bit is asserted
    set x, 7            ; Preload bit counter, then delay until halfway through
bitloop:                ; the first data bit (12 cycles incl wait, set).
    in pins, 1          ; Shift data bit into ISR
    jmp x-- bitloop [6] ; Loop 8 times, each loop iteration is 8 cycles

    jmp pin good_stop   ; Check stop bit (should be high)

    wait 1 pin 0        ; and wait for line to return to idle state.
    jmp start           ; Don't push data if we didn't see good framing.

good_stop:              ; No delay before returning to start; a little slack is
    push                ; Store the data into the FIFO


% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void uart_rx_program_init(PIO pio, uint sm, uint offset, uint pin, uint baud, uint dataLength) {
    printf("PIO %u | SM %u | OFS %u | PIN %u | BAUD %u | LEN %u\n", pio_get_index(pio), sm, offset, pin, baud, dataLength);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    pio_gpio_init(pio, pin);
    gpio_set_dir(pin, false);
    gpio_pull_up(pin);

    pio_sm_config c = uart_rx_program_get_default_config(offset);
    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP
    //printf("AutoPush: %u/n", dataLength);
    sm_config_set_in_shift(&c, true, false, dataLength);
    // Deeper FIFO as we're not doing any TX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    // SM transmits 1 bit per 8 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (8 * baud);
    sm_config_set_clkdiv(&c, div);
    

    pio_sm_init(pio, sm, offset, &c);
}


%}